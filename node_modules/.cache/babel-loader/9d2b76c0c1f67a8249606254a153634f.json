{"ast":null,"code":"// ##############################\n// // // javascript library for creating charts\n// // // get data from random data from api import\n// #############################\nvar Chartist = require('chartist');\n\nvar math = require('mathjs'); // ##############################\n// // // variables used to create animation on charts\n// #############################\n\n\nvar delays = 80,\n    durations = 500;\nvar delays2 = 80,\n    durations2 = 500; // ##############################\n// // // Daily Sales\n// #############################\n\nvar setDailySalesChartFunc = function setDailySalesChartFunc(data) {\n  var maxInData = math.max(data);\n  var minInData = math.min(data);\n  var dailySalesChart = {\n    data: {\n      labels: ['M', 'T', 'W', 'T', 'F', 'S'],\n      series: [data]\n    },\n    options: {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0\n      }),\n      low: minInData - 10,\n      high: maxInData + 10,\n      // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    },\n    // for animation\n    animation: {\n      draw: function draw(data) {\n        if (data.type === 'line' || data.type === 'area') {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n              to: data.path.clone().stringify(),\n              easing: Chartist.Svg.Easing.easeOutQuint\n            }\n          });\n        } else if (data.type === 'point') {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: 'ease'\n            }\n          });\n        }\n      }\n    }\n  };\n  return dailySalesChart;\n}; // ##############################\n// // // Email Subscriptions\n// #############################\n\n\nvar setEmailsSubscriptionChartFunc = function setEmailsSubscriptionChartFunc(data) {\n  var maxInData = math.max(data);\n  var emailsSubscriptionChart = {\n    data: {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      series: [data]\n    },\n    options: {\n      axisX: {\n        showGrid: false\n      },\n      low: 0,\n      high: maxInData + 5,\n      chartPadding: {\n        top: 0,\n        right: 10,\n        bottom: 0,\n        left: 0\n      }\n    },\n    responsiveOptions: [['screen and (max-width: 640px)', {\n      seriesBarDistance: 5,\n      axisX: {\n        labelInterpolationFnc: function labelInterpolationFnc(value) {\n          return value[0];\n        }\n      }\n    }]],\n    animation: {\n      draw: function draw(data) {\n        if (data.type === 'bar') {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays2,\n              dur: durations2,\n              from: 0,\n              to: 1,\n              easing: 'ease'\n            }\n          });\n        }\n      }\n    }\n  };\n  return emailsSubscriptionChart;\n}; // ##############################\n// // // Completed Tasks\n// #############################\n\n\nvar completedTasksChart = {\n  data: {\n    labels: ['12am', '3pm', '6pm', '9pm', '12pm', '3am', '6am', '9am'],\n    series: []\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 1000,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function draw(data) {\n      if (data.type === 'line' || data.type === 'area') {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === 'point') {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: 'ease'\n          }\n        });\n      }\n    }\n  }\n};\nmodule.exports = {\n  setDailySalesChartFunc: setDailySalesChartFunc,\n  setEmailsSubscriptionChartFunc: setEmailsSubscriptionChartFunc,\n  completedTasksChart: completedTasksChart\n};","map":{"version":3,"sources":["/home/dana/job_interviews/NextDevs/home_assignment/material-dashboard-react-master/src/variables/charts.js"],"names":["Chartist","require","math","delays","durations","delays2","durations2","setDailySalesChartFunc","data","maxInData","max","minInData","min","dailySalesChart","labels","series","options","lineSmooth","Interpolation","cardinal","tension","low","high","chartPadding","top","right","bottom","left","animation","draw","type","element","animate","d","begin","dur","from","path","clone","scale","translate","chartRect","height","stringify","to","easing","Svg","Easing","easeOutQuint","opacity","index","setEmailsSubscriptionChartFunc","emailsSubscriptionChart","axisX","showGrid","responsiveOptions","seriesBarDistance","labelInterpolationFnc","value","completedTasksChart","module","exports"],"mappings":"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","sourcesContent":["// ##############################\n// // // javascript library for creating charts\n// // // get data from random data from api import\n// #############################\nvar Chartist = require('chartist');\nconst math = require('mathjs');\n\n// ##############################\n// // // variables used to create animation on charts\n// #############################\nvar delays = 80,\n  durations = 500;\nvar delays2 = 80,\n  durations2 = 500;\n\n// ##############################\n// // // Daily Sales\n// #############################\n\nconst setDailySalesChartFunc = (data) => {\n  const maxInData = math.max(data);\n  const minInData = math.min(data);\n\n  const dailySalesChart = {\n    data: {\n      labels: ['M', 'T', 'W', 'T', 'F', 'S'],\n      series: [data],\n    },\n    options: {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0,\n      }),\n      low: minInData - 10,\n      high: maxInData + 10, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n      },\n    },\n    // for animation\n    animation: {\n      draw: function(data) {\n        if (data.type === 'line' || data.type === 'area') {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path\n                .clone()\n                .scale(1, 0)\n                .translate(0, data.chartRect.height())\n                .stringify(),\n              to: data.path.clone().stringify(),\n              easing: Chartist.Svg.Easing.easeOutQuint,\n            },\n          });\n        } else if (data.type === 'point') {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: 'ease',\n            },\n          });\n        }\n      },\n    },\n  };\n\n  return dailySalesChart;\n};\n\n// ##############################\n// // // Email Subscriptions\n// #############################\nconst setEmailsSubscriptionChartFunc = (data) => {\n  const maxInData = math.max(data);\n\n  const emailsSubscriptionChart = {\n    data: {\n      labels: [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'Mai',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ],\n      series: [data],\n    },\n    options: {\n      axisX: {\n        showGrid: false,\n      },\n      low: 0,\n      high: maxInData + 5,\n      chartPadding: {\n        top: 0,\n        right: 10,\n        bottom: 0,\n        left: 0,\n      },\n    },\n    responsiveOptions: [\n      [\n        'screen and (max-width: 640px)',\n        {\n          seriesBarDistance: 5,\n          axisX: {\n            labelInterpolationFnc: function(value) {\n              return value[0];\n            },\n          },\n        },\n      ],\n    ],\n    animation: {\n      draw: function(data) {\n        if (data.type === 'bar') {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays2,\n              dur: durations2,\n              from: 0,\n              to: 1,\n              easing: 'ease',\n            },\n          });\n        }\n      },\n    },\n  };\n\n  return emailsSubscriptionChart;\n};\n\n// ##############################\n// // // Completed Tasks\n// #############################\n\nconst completedTasksChart = {\n  data: {\n    labels: ['12am', '3pm', '6pm', '9pm', '12pm', '3am', '6am', '9am'],\n    series: [],\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0,\n    }),\n    low: 0,\n    high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    },\n  },\n  animation: {\n    draw: function(data) {\n      if (data.type === 'line' || data.type === 'area') {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path\n              .clone()\n              .scale(1, 0)\n              .translate(0, data.chartRect.height())\n              .stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint,\n          },\n        });\n      } else if (data.type === 'point') {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: 'ease',\n          },\n        });\n      }\n    },\n  },\n};\n\nmodule.exports = {\n  setDailySalesChartFunc,\n  setEmailsSubscriptionChartFunc,\n  completedTasksChart,\n};\n"]},"metadata":{},"sourceType":"module"}