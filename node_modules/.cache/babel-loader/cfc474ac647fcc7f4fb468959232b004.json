{"ast":null,"code":"// ##############################\n// // // javascript library for creating charts\n// // // get data from random data from api import\n// #############################\nvar Chartist = require('chartist'); // ##############################\n// // // variables used to create animation on charts\n// #############################\n\n\nvar delays = 80,\n    durations = 500;\nvar delays2 = 80,\n    durations2 = 500; // ##############################\n// // // Daily Sales\n// #############################\n\nvar setDailySalesChartFunc = function setDailySalesChartFunc(data) {\n  var dailySalesChart = {\n    data: data,\n    // data: {\n    // labels: ['M', 'T', 'W', 'T', 'F', 'S'],\n    // series: [],\n    // },\n    options: {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0\n      }),\n      low: 0,\n      high: 50,\n      // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    },\n    // for animation\n    animation: {\n      draw: function draw(data) {\n        if (data.type === 'line' || data.type === 'area') {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n              to: data.path.clone().stringify(),\n              easing: Chartist.Svg.Easing.easeOutQuint\n            }\n          });\n        } else if (data.type === 'point') {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: 'ease'\n            }\n          });\n        }\n      }\n    }\n  };\n  return dailySalesChart;\n}; // ##############################\n// // // Email Subscriptions\n// #############################\n\n\nvar emailsSubscriptionChart = {\n  data: {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    series: [byMounthData]\n  },\n  options: {\n    axisX: {\n      showGrid: false\n    },\n    low: 0,\n    high: 1000,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0\n    }\n  },\n  responsiveOptions: [['screen and (max-width: 640px)', {\n    seriesBarDistance: 5,\n    axisX: {\n      labelInterpolationFnc: function labelInterpolationFnc(value) {\n        return value[0];\n      }\n    }\n  }]],\n  animation: {\n    draw: function draw(data) {\n      if (data.type === 'bar') {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: 'ease'\n          }\n        });\n      }\n    }\n  }\n}; // ##############################\n// // // Completed Tasks\n// #############################\n\nvar completedTasksChart = {\n  data: {\n    labels: ['12am', '3pm', '6pm', '9pm', '12pm', '3am', '6am', '9am'],\n    series: [byTimeData]\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0\n    }),\n    low: 0,\n    high: 1000,\n    // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  },\n  animation: {\n    draw: function draw(data) {\n      if (data.type === 'line' || data.type === 'area') {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint\n          }\n        });\n      } else if (data.type === 'point') {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: 'ease'\n          }\n        });\n      }\n    }\n  }\n};\nmodule.exports = {\n  setDailySalesChartFunc: setDailySalesChartFunc,\n  emailsSubscriptionChart: emailsSubscriptionChart,\n  completedTasksChart: completedTasksChart\n};","map":{"version":3,"sources":["/home/dana/job_interviews/NextDevs/home_assignment/material-dashboard-react-master/src/variables/charts.js"],"names":["Chartist","require","delays","durations","delays2","durations2","setDailySalesChartFunc","data","dailySalesChart","options","lineSmooth","Interpolation","cardinal","tension","low","high","chartPadding","top","right","bottom","left","animation","draw","type","element","animate","d","begin","dur","from","path","clone","scale","translate","chartRect","height","stringify","to","easing","Svg","Easing","easeOutQuint","opacity","index","emailsSubscriptionChart","labels","series","byMounthData","axisX","showGrid","responsiveOptions","seriesBarDistance","labelInterpolationFnc","value","completedTasksChart","byTimeData","module","exports"],"mappings":"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","sourcesContent":["// ##############################\n// // // javascript library for creating charts\n// // // get data from random data from api import\n// #############################\nvar Chartist = require('chartist');\n\n// ##############################\n// // // variables used to create animation on charts\n// #############################\nvar delays = 80,\n  durations = 500;\nvar delays2 = 80,\n  durations2 = 500;\n\n// ##############################\n// // // Daily Sales\n// #############################\n\nconst setDailySalesChartFunc = (data) => {\n  const dailySalesChart = {\n    data,\n    // data: {\n    // labels: ['M', 'T', 'W', 'T', 'F', 'S'],\n    // series: [],\n    // },\n    options: {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0,\n      }),\n      low: 0,\n      high: 50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n      },\n    },\n    // for animation\n    animation: {\n      draw: function(data) {\n        if (data.type === 'line' || data.type === 'area') {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path\n                .clone()\n                .scale(1, 0)\n                .translate(0, data.chartRect.height())\n                .stringify(),\n              to: data.path.clone().stringify(),\n              easing: Chartist.Svg.Easing.easeOutQuint,\n            },\n          });\n        } else if (data.type === 'point') {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: 'ease',\n            },\n          });\n        }\n      },\n    },\n  };\n\n  return dailySalesChart;\n};\n\n// ##############################\n// // // Email Subscriptions\n// #############################\n\nconst emailsSubscriptionChart = {\n  data: {\n    labels: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'Mai',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ],\n    series: [byMounthData],\n  },\n  options: {\n    axisX: {\n      showGrid: false,\n    },\n    low: 0,\n    high: 1000,\n    chartPadding: {\n      top: 0,\n      right: 5,\n      bottom: 0,\n      left: 0,\n    },\n  },\n  responsiveOptions: [\n    [\n      'screen and (max-width: 640px)',\n      {\n        seriesBarDistance: 5,\n        axisX: {\n          labelInterpolationFnc: function(value) {\n            return value[0];\n          },\n        },\n      },\n    ],\n  ],\n  animation: {\n    draw: function(data) {\n      if (data.type === 'bar') {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays2,\n            dur: durations2,\n            from: 0,\n            to: 1,\n            easing: 'ease',\n          },\n        });\n      }\n    },\n  },\n};\n\n// ##############################\n// // // Completed Tasks\n// #############################\n\nconst completedTasksChart = {\n  data: {\n    labels: ['12am', '3pm', '6pm', '9pm', '12pm', '3am', '6am', '9am'],\n    series: [byTimeData],\n  },\n  options: {\n    lineSmooth: Chartist.Interpolation.cardinal({\n      tension: 0,\n    }),\n    low: 0,\n    high: 1000, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n    chartPadding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    },\n  },\n  animation: {\n    draw: function(data) {\n      if (data.type === 'line' || data.type === 'area') {\n        data.element.animate({\n          d: {\n            begin: 600,\n            dur: 700,\n            from: data.path\n              .clone()\n              .scale(1, 0)\n              .translate(0, data.chartRect.height())\n              .stringify(),\n            to: data.path.clone().stringify(),\n            easing: Chartist.Svg.Easing.easeOutQuint,\n          },\n        });\n      } else if (data.type === 'point') {\n        data.element.animate({\n          opacity: {\n            begin: (data.index + 1) * delays,\n            dur: durations,\n            from: 0,\n            to: 1,\n            easing: 'ease',\n          },\n        });\n      }\n    },\n  },\n};\n\nmodule.exports = {\n  setDailySalesChartFunc,\n  emailsSubscriptionChart,\n  completedTasksChart,\n};\n"]},"metadata":{},"sourceType":"module"}